class MyCircularDeque {
        int a[];
        int front,rear=0,size=0;
    public MyCircularDeque(int k) {
        front = k-1;
        a = new int[k];
        Arrays.fill(a,-1); 
    }
    
    public boolean insertFront(int value) {
        if(!isFull()){
            a[front]=value;
            front=(front -1 + a.length)% a.length;
            size +=1;
            return true;
        }
       else{ return false;}
    }
    
    public boolean insertLast(int value) {
        if(!isFull()){
            a[rear] =value;
            rear=(rear+1)%a.length;
            size +=1;
            return true;
        }else{
            return false;}
    }
    
    public boolean deleteFront() {
        if(!isEmpty()){
            front=(front +1 + a.length)% a.length;
            size -=1;
            return true;
        }
       else{ return false;}
    }
    
    public boolean deleteLast() {
        if(!isEmpty()){
            rear=(rear-1 + a.length)%a.length;
            size -=1;
            return true;
        }else{
            return false;}
    }
    
    public int getFront() {
       if(isEmpty()){
           return -1;
       }else{
           return a[(front +1)%a.length];
       }
    }
    
    public int getRear() {
        if(isEmpty()){
           return -1;
       }else{
           return a[(rear -1 +a.length)%a.length];
       }
    }
    
    public boolean isEmpty() {
       return size==0;
    }
    
    public boolean isFull() {
        return size==a.length;
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */
